function pre_deploy_check() {
  grep -i '\[default]' "${AWS_SHARED_CREDENTIALS_FILE}" &> /dev/null
  if [[ "${?}" -ne 0 && ( -z "${AWS_SECRET_ACCESS_KEY// /}" || -z "${AWS_ACCESS_KEY_ID// /}" ) ]] ; then
    error_exit "Please, define your AWS tokens (access and secret keys)"
  fi

  terraform version &> /dev/null
  [[ "${?}" -ne 0 ]] && install_terraform

  kubectl --help &> /dev/null
  [[ "${?}" -ne 0 ]] && install_kubectl

  helm --help &> /dev/null
  [[ "${?}" -ne 0 ]] && install_helm
}

function install_terraform() {
  read -ep "Terraform not founded. Do you want install terraform? Yes/No " tf_install
  declare -lr TF_install="${tf_install:-"yes"}"
  [[ "${TF_install}" != 'yes' ]] && error_exit "You need to install Terraform"
  log_msg "Installing Terraform"
  log_msg "Downloading Terraform"
  curl -sLO "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_${KERNEL_NAME}_amd64.zip"
  log_msg "Extracting Terraform"
  gunzip -S "_${TERRAFORM_VERSION}_${KERNEL_NAME}_amd64.zip" terraform_${TERRAFORM_VERSION}_${KERNEL_NAME}_amd64.zip
  chmod +x terraform

  id -a | grep -i 'uid=0' &> /dev/null
  [[ "${?}" -ne 0 ]] && sudo mv -f terraform /usr/local/bin/ || mv -f terraform /usr/local/bin/

  terraform version &> /dev/null
  [[ "${?}" -ne 0 ]] && log_msg "Terraform installed with success" || error_exit "Fail to install Terraform"
}

function install_kubectl() {
  read -ep "Kubectl not founded. Do you want install Kubectl? Yes/No " kubectl_install
  declare -lr KUBECTL_INSTALL="${kubectl_install:-"yes"}"
  [[ "${KUBECTL_INSTALL}" != 'yes' ]] && { log_msg "You need to install Kubectl" ; return ; }
  log_msg "Installing kubectl"
  log_msg "Downloading kubectl"
  curl -sLO https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
  chmod +x kubectl

  id -a | grep -i 'uid=0' &> /dev/null
  [[ "${?}" -ne 0 ]] && sudo mv -f kubectl /usr/local/bin/ || mv -f kubectl /usr/local/bin/

  kubectl --help &> /dev/null
  [[ "${?}" -ne 0 ]] && log_msg "kubectl installed with success" || error_exit "Fail to install kubectl"
}

function install_helm() {
  read -ep "Helm not founded. Do you want install Helm? Yes/No " helm_install
  declare -lr HELM_INSTALL="${helm_install:-"yes"}"
  [[ "${HELM_INSTALL}" != 'yes' ]] && { log_msg "You need to install Helm" ; return ; }
  log_msg "Installing helm"
  log_msg "Downloading helm"
  curl -sL https://get.helm.sh/helm-v2.14.2-${KERNEL_NAME}-amd64.tar.gz | tar xz

  id -a | grep -i 'uid=0' &> /dev/null
  if [[ "${?}" -ne 0 ]]; then
    ls -l "${KERNEL_NAME}-amd64/" | awk '/-rwx/{ print $9 }' | xargs -I{} mv "${KERNEL_NAME}-amd64/{}" /usr/local/bin/{}
  else
    ls -l "${KERNEL_NAME}-amd64/" | awk '/-rwx/{ print $9 }' | xargs -I{} sudo mv "${KERNEL_NAME}-amd64/{}" /usr/local/bin/{}
  fi
  rm -rf ${KERNEL_NAME}-amd64/

  helm --help &> /dev/null
  [[ "${?}" -ne 0 ]] && log_msg "helm installed with success" || error_exit "Fail to install helm"
}
